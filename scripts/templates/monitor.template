#- =============================================================================
#- Monitoring
#- =============================================================================

#- Forward limit
ecmcConfigOrDie "Cfg.LinkEcEntryToObject(${MON_EC_LIM_FWD},"ax${ID}.mon.highlim")"
ecmcIf("'${MON_LIM_FWD_POL=NC}'=='NO'")
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonLimitFwdPolarity(${ID},1)"
#- else
${IF_FALSE}ecmcConfigOrDie "Cfg.SetAxisMonLimitFwdPolarity(${ID},0)"
ecmcEndIf()

#- Backward limit
ecmcConfigOrDie "Cfg.LinkEcEntryToObject(${MON_EC_LIM_BWD},"ax${ID}.mon.lowlim")"
ecmcIf("'${MON_LIM_BWD_POL=NC}'=='NO'")
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonLimitBwdPolarity(${ID},1)"
#- else
${IF_FALSE}ecmcConfigOrDie "Cfg.SetAxisMonLimitBwdPolarity(${ID},0)"
ecmcEndIf()

#- Limit switch latching
ecmcIf("'${MON_LIM_LTCH=YES}'=='YES'")
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonLatchLimit(${ID},1)"
#- else
${IF_FALSE}ecmcConfigOrDie "Cfg.SetAxisMonLatchLimit(${ID},0)"
ecmcEndIf()

#- Interlock
ecmcConfigOrDie "Cfg.LinkEcEntryToObject(${MON_EC_HW_IL},"ax${ID}.mon.extinterlock")"
ecmcIf("'${MON_HW_IL_POL=NC}'=='NO'")
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonExtHWInterlockPolarity(${ID},1)"
#- else
${IF_FALSE}ecmcConfigOrDie "Cfg.SetAxisMonExtHWInterlockPolarity(${ID},0)"
ecmcEndIf()

#- Home sensor
ecmcConfigOrDie "Cfg.LinkEcEntryToObject(${MON_EC_HME},"ax${ID}.mon.homesensor")"
ecmcIf("'${MON_HME_POL=NC}'=='NO'")
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonHomeSwitchPolarity(${ID},1)"
#- else
${IF_FALSE}ecmcConfigOrDie "Cfg.SetAxisMonHomeSwitchPolarity(${ID},0)"
ecmcEndIf()

#- Analog interlock
ecmcIf("'${MON_EC_ANA_IL=NA}'!='NA'")
${IF_TRUE}ecmcConfigOrDie "Cfg.LinkEcEntryToObject(${MON_EC_ANA_IL},"ax${ID}.mon.analoginterlock")"
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonEnableAnalogInterlock(${ID},1)"
ecmcEndIf()
ecmcIf("'${MON_ANA_IL_POL=NC}'=='NO'")
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonAnalogInterlockPolarity(${ID},1)"
#- else
${IF_FALSE}ecmcConfigOrDie "Cfg.SetAxisMonAnalogInterlockPolarity(${ID},0)"
ecmcEndIf()
ecmcIf("'${MON_ANA_IL_RAW_LIM=NA}'!='NA'")
${IF_TRUE}ecmcConfigOrDie "Cfg.SetAxisMonAnalogInterlockRawLimit(${ID},${MON_ANA_IL_RAW_LIM})"
ecmcEndIf()



{%- if monitoring %}
    #- =============================================================================
    #- Monitoring
    #- =============================================================================
    {%- set lag = None if monitoring.lag is undefined else monitoring.lag %}
    {%- set target = None if monitoring.target is undefined else monitoring.target %}
    {%- set velocity = None if monitoring.velocity is undefined else monitoring.velocity %}
    {%- if lag.enable %}
        #- lag error if |planned-actual|>{{ monitoring.lag.tolerance }} for >{{ monitoring.lag.time }} cycles
        ecmcConfigOrDie "Cfg.SetAxisMonEnableLagMon({{ axis.id }},{{ monitoring.lag.enable|int }})"
        ecmcConfigOrDie "Cfg.SetAxisMonPosLagTol({{ axis.id }},{{ monitoring.lag.tolerance }})"
        ecmcConfigOrDie "Cfg.SetAxisMonPosLagTime({{ axis.id }},{{ monitoring.lag.time }})"
    {%- else  %}
        ecmcConfigOrDie "Cfg.SetAxisMonEnableLagMon({{ axis.id }},0)"
    {%- endif %}
    {%- if target.enable %}
        #- at target if |target-actual|<{{ monitoring.target.tolerance }} for >{{ monitoring.target.time }} cycles
        ecmcConfigOrDie "Cfg.SetAxisMonEnableAtTargetMon({{ axis.id }},{{ monitoring.target.enable|int }})"
        ecmcConfigOrDie "Cfg.SetAxisMonAtTargetTol({{ axis.id }},{{ monitoring.target.tolerance }})"
        ecmcConfigOrDie "Cfg.SetAxisMonAtTargetTime({{ axis.id }},{{ monitoring.target.time }})"
    {%- endif %}
    {%- if velocity.enable %}
        #- velocity: v_max = {{ monitoring.velocity.max}}
        ecmcConfigOrDie "Cfg.SetAxisMonEnableMaxVel({{ axis.id }},{{ monitoring.velocity.enable|int }})"
        ecmcConfigOrDie "Cfg.SetAxisMonMaxVel({{ axis.id }},{{ monitoring.velocity.max }})"
        ecmcConfigOrDie "Cfg.SetAxisMonMaxVelTrajILDelay({{ axis.id }},{{ monitoring.velocity.time.trajectory }})"
        {%- if monitoring.velocity.time.drive is defined %}
            ecmcConfigOrDie "Cfg.SetAxisMonMaxVelDriveILDelay({{ axis.id }},{{ monitoring.velocity.time.drive }})"
        {%- endif  %}
    {%- else %}
        ecmcConfigOrDie "Cfg.SetAxisMonEnableMaxVel({{ axis.id }},0)"
    {%- endif %}
    {%- if monitoring.velocityDifference is defined %}
        {%- if monitoring.velocityDifference.enable %}
            #- velocity difference: max diff = {{ monitoring.velocityDifference.max}}
            ecmcConfigOrDie "Cfg.SetAxisMonEnableVelocityDiff({{ axis.id }},{{ monitoring.velocityDifference.enable|int }})"
            ecmcConfigOrDie "Cfg.SetAxisMonVelDiffTol({{ axis.id }},{{ monitoring.velocityDifference.max }})"
            ecmcConfigOrDie "Cfg.SetAxisMonVelDiffTrajILDelay({{ axis.id }},{{ monitoring.velocityDifference.time.trajectory }})"
            {%- if monitoring.velocity.time.drive is defined %}
                ecmcConfigOrDie "Cfg.SetAxisMonVelDiffDriveILDelay({{ axis.id }},{{ monitoring.velocityDifference.time.drive }})"
            {%- endif  %}
        {%- endif  %}
    {%- endif %}
{%- endif %}
